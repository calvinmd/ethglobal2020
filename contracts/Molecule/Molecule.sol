pragma solidity ^0.4.22;

import "./AccessAdmin.sol";
import "./ERC721.sol"; // Commented out ERC165 for this demo


/**
 * @title Molecule Protocol Contract
 * @dev A small smart contract to provide molecule structure definition and checks
 */
contract Molecule is AccessAdmin {
    uint public total = 0;
    uint public buyerTotal = 0;
    uint public sellerTotal = 0;

    address public erc721Token1; // E.g. KYC ERC721 contract address
    address public erc721Token2; // E.g. Documents approved token
    // TODO: use array or struct to support multiple ERC721 tokens?
    // TODO: this can support ERC20, too, but delegate it to DEX/Marketplace for now
    mapping (address => bool) public isBuyerWhitelisted;
    mapping (address => bool) public isSellerWhitelisted;

    event AddressWhitelisted(address indexed addr, address operator, bool isBuyer);
    event AddressRemovedFromWhitelist(address indexed addr, address operator, bool isBuyer);

    // @dev Constructor: sets (multiple) ERC721 token contract address(es)
    constructor(address _erc721Token1, address _erc721Token2) public {
        erc721Token1 = _erc721Token1;
        erc721Token2 = _erc721Token2;
    }

    // Doesn't accept eth
    function () external payable {
        revert();
    }

    /**
     * @dev Allow operators to add whitelisted contracts
     * @param _newAddr New whitelisted contract address
     * @param _isBuyer Boolean, specifies role
     */
    function addToWhitelist(address _newAddr, bool _isBuyer) public onlyOperator {
        require(
            _newAddr != address(0),
            "Invalid new address."
        );

        require(
            _verifyMoleculeStructure(_newAddr, _isBuyer),
            "Invalid molecule structure."
        );

        if (_isBuyer) {
            // Make sure no dups
            require(
                !isBuyerWhitelisted[_newAddr],
                "Buyer address is already whitelisted."
            );

            isBuyerWhitelisted[_newAddr] = true;
            buyerTotal++;
            total++;
            emit AddressWhitelisted(_newAddr, msg.sender, _isBuyer); 
        } else {
            // Make sure no dups
            require(
                !isSellerWhitelisted[_newAddr],
                "Seller address is already whitelisted."
            );

            isSellerWhitelisted[_newAddr] = true;
            sellerTotal++;
            total++;
            emit AddressWhitelisted(_newAddr, msg.sender, _isBuyer);
        }
    }

    /**
     * @dev Allow operators to remove a contract from the whitelist
     * @param _addr Contract address to be removed
     * @param _isBuyer Boolean, specifies role
     */
    function removeFromWhitelist(address _addr, bool _isBuyer) public onlyOperator {
        require(
            _addr != address(0),
            "Invalid address."
        );

        if (_isBuyer) {
            // Make sure the address is in whitelist
            require(
                isBuyerWhitelisted[_addr],
                "Buyer address not in whitelist."
            );

            isBuyerWhitelisted[_addr] = false;
            if (buyerTotal > 0) {
                buyerTotal--;
            }
            if (total > 0) {
                total--;
            }
            emit AddressRemovedFromWhitelist(_addr, msg.sender, _isBuyer);
        } else {
            // Make sure the address is in whitelist
            require(
                isSellerWhitelisted[_addr],
                "Seller address not in whitelist."
            );

            isSellerWhitelisted[_addr] = false;
            if (sellerTotal > 0) {
                sellerTotal--;
            }
            if (total > 0) {
                total--;
            }
            emit AddressRemovedFromWhitelist(_addr, msg.sender, _isBuyer);
        }
    }

    /**
     * @dev Checks if an address satisfies the buyer or seller whitelist requirements.
     *      This section should be generated by a molecule factory. This is an example
     *      of using just a ERC721 check
     * @param _addr Address to check
     * @param _isBuyer Boolean value -- determines role
     */
    function _verifyMoleculeStructure(address _addr, bool _isBuyer) private returns (bool) {
        ERC721 token1 = ERC721(erc721Token1);
        ERC721 token2 = ERC721(erc721Token2);
        // Buyers and sellers can have different checks
        // in this KYC example, it happens to be the same check on both sides
        uint256 balance1 = token1.balanceOf(_addr);
        uint256 balance2 = token2.balanceOf(_addr);
        return balance1 != 0 && balance2 !=0;
    }
}
